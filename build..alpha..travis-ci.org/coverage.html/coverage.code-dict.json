{"/home/travis/build/npmtest/node-npmtest-schenkerian/test.js":"/* istanbul instrument in package npmtest_schenkerian */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-schenkerian/lib.npmtest_schenkerian.js":"/* istanbul instrument in package npmtest_schenkerian */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_schenkerian = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_schenkerian = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-schenkerian/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-schenkerian && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_schenkerian */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_schenkerian\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_schenkerian.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_schenkerian.rollup.js'] =\n            local.assetsDict['/assets.npmtest_schenkerian.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_schenkerian.__dirname + '/lib.npmtest_schenkerian.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-schenkerian/node_modules/schenkerian/index.js":"var _ = require('lodash')\nvar Url = require('url')\nvar commonWords = {}\nvar gramophone = require('gramophone')\nvar Parser = require('htmlparser2').WritableStream\nvar Cornet = require('cornet')\nvar Readable = require('stream').Readable\nvar cheerio = require('cheerio')\nvar Promise = require('bluebird')\nvar RE_SPACES = /\\s+/g\nvar RE_ALPHA_NUM = /[^\\w]/g\nvar RE_BAD_TITLES = /&lt;\\/?\\w+?&gt;/g\nvar RE_AMPS = /&amp;/g\nvar TfIdf = require('natural').TfIdf\nvar path = require('path')\nvar spawn = require('child_process').spawn\nvar request = require('request')\n\nvar phantomjs = require('phantomjs-prebuilt')\n\nvar defaultReqOptions = {\n  timeout: 6000,\n  maxRedirects: 30,\n  userAgent: 'Schenkerianbot/1.0 (+https://github.com/mix/schenkerian)'\n}\n\nvar commonWordsArray = require('yamljs').load(path.join(__dirname, 'common-words.yaml')).words\n\nvar imageExtensions = ['gif', 'png', 'svg', 'ico', 'jpg', 'jpeg']\nvar musicExtensions = ['mp3', 'wav', 'aiff']\nvar videoExtensions = ['avi', 'mpg', 'mpeg', 'mp4']\n\ncommonWordsArray.forEach(function commonWordAdd(w) {\n  commonWords[w] = 1\n})\n\nmodule.exports = function _export(options) {\n  var url = options.url\n  if (options.body) {\n    return analyze(url, options.body, options.returnSource)\n  } else {\n    if (options.tokens) _.merge(options, {jar: cookieJar(options.tokens, url)})\n    return requestAndSendToAnalyze(url, options)\n  }\n}\n\nfunction requestAndSendToAnalyze(url, options) {\n  var requestOptions = {\n    url: url,\n    timeout: options.timeout,\n    userAgent: options.userAgent,\n    fallbackRequest: options.fallbackRequest,\n    jar: options.jar\n  }\n  if (options.agent) {\n    requestOptions.agentClass = options.agent.agentClass\n    requestOptions.agentOptions = {\n      socksHost: options.agent.socksHost,\n      socksPort: options.agent.socksPort\n    }\n  }\n\n  if (isMedia(url)) {\n    return requestPage(_.merge({url: url}, _.defaults(requestOptions, defaultReqOptions)))\n      .then(function (results) {\n        return {\n          url: results.url,\n          title: url,\n          image: url\n        }\n      })\n  }\n\n  if (options.forceRequest) {\n    return requestPage(_.merge({url: url}, _.defaults(requestOptions, defaultReqOptions)))\n      .then(function (results) {\n        return {\n          url: results.url,\n          title: url,\n          image: url,\n          source: results.body\n        }\n      })\n  }\n\n  var endUrl\n  return renderPage(url, _.defaults(requestOptions, defaultReqOptions))\n  .then(function (results) {\n    endUrl = results.url\n    return analyze(endUrl, results.body, options.returnSource)\n  })\n  .then(function (res) {\n    return _.merge({url: endUrl}, res)\n  })\n}\n\nfunction renderPage(url, options) {\n  var child, output = []\n\n  return new Promise(function promise(resolve, reject) {\n    var childArgs = [\n      '--ignore-ssl-errors=true',\n      '--load-images=false'\n    ]\n    if (options.agentOptions) {\n      childArgs.push('--proxy=' + options.agentOptions.socksHost + ':' + options.agentOptions.socksPort)\n    }\n    childArgs = childArgs.concat([\n      path.join(__dirname, 'phantom-load.js'),\n      url,\n      options.userAgent,\n      options.maxRedirects,\n      options.timeout\n    ])\n\n    if (options.jar) childArgs.push(JSON.stringify(options.jar))\n    child = spawn(phantomjs.path, childArgs)\n\n    child.stdout.on('data', function(stdout) {\n      output.push(stdout.toString().trim())\n    })\n\n    child.on('close', function (exitCode) {\n      if (exitCode === 0) {\n        resolve({url: output[0], body: output.slice(1).join('')})\n      } else {\n        if ((/\\[error\\]/i).test(output)) reject(new Error(output.join('')))\n        else reject(new Error('Error occurred scraping ' + url))\n      }\n      child = null\n    })\n\n    child.on('error', function (err) {\n      reject(err)\n    })\n\n    process.on('exit', function killChild() {\n      if (child) {\n        child.kill()\n        reject(new Error('Process terminated. Canceling child process retrieving url[' + url + ']'))\n      }\n    })\n\n    setTimeout(function () {\n      if (child) {\n        child.kill()\n        reject(new Error('Process exceeded timeout of ' + (options.timeout + 1000) + 'ms retrieving url[' + url + ']'))\n      }\n    }, options.timeout + 1000)\n  })\n  .catch(function (err) {\n    if (options.fallbackRequest) return requestPage(_.merge({url: url}, options))\n    throw err\n  })\n}\n\nfunction analyze(url, body, returnSource) {\n  return Promise.all([\n    gatherMetaData(url, body),\n    cleanBody(body)\n    .then(function (result) {\n      if (!returnSource) return removeCommonWords(result)\n      return result\n    })\n  ])\n  .then(function (data) {\n    var things = data[0]\n    var content = data[1]\n    var graph = gramophone.extract([things.title, content].join(' '), {\n      score: true,\n      stopWords: commonWordsArray,\n      stem: true,\n      limit: 20\n    })\n    var tfidf = new TfIdf()\n    tfidf.addDocument([things.title, content].join(' '))\n    var tfGraph = graph.map(function (item) {\n      item.score = tfidf.tfidf(item.term, 0)\n      return item\n    })\n    tfGraph = _.filter(tfGraph, function (item) {\n      return item.term !== ''\n    })\n\n    var results = {\n      totalWords: content.split(' ').length,\n      relevance: tfGraph\n    }\n    return _.merge(results, {\n      title: things.title.replace(RE_BAD_TITLES, '').replace(RE_AMPS, '&'),\n      description: things.description ? things.description.replace(RE_BAD_TITLES, '').replace(RE_AMPS, '&') : '',\n      image: things.image,\n      amphtml: things.amphtml,\n      canonical: things.canonical\n    })\n  })\n  .then(function (results) {\n    if (returnSource) {\n      return removeScript(body)\n        .then(function (rsBody) {\n          return _.merge(results, {\n            source: rsBody\n          })\n        })\n    }\n    return results\n  })\n}\n\nfunction gatherMetaData(url, body) {\n  var removeSelectors = [\n    'script'\n  , 'noscript'\n  , 'style'\n  , 'iframe'\n  , 'nav'\n  , 'footer'\n  , 'label'\n  , 'audio'\n  , 'video'\n  , 'aside'\n  ]\n\n  return parseDom(body, 'head', removeSelectors.join(','))\n  .then(function (parsedBody) {\n    var cheerioBody = cheerio(parsedBody)\n    var title\n    cheerioBody.find('meta[property=\"og:title\"], meta[property=\"twitter:title\"]').each(function (i, elem) {\n      if (!title) title = cheerio(elem).attr('content')\n    })\n    if (!title) {\n      cheerioBody.find('title').each(function (i, elem) {\n        title = cheerio(elem).text()\n      })\n    }\n\n    var image\n    cheerioBody.find('meta[property=\"og:image\"], meta[property=\"twitter:image:src\"]').each(function (i, elem) {\n      var elemContent = cheerio(elem).attr('content')\n      if (!image) image = elemContent && elemContent.trim()\n    })\n    if (image) {\n      var host = Url.parse(url).host\n      if (!(/^(http(s)?\\:)?\\/\\//i).test(image) && !(new RegExp(host, 'i')).test(image)) {\n        image = 'http://' + host + '/' + image\n      }\n      if ((/^\\/\\//).test(image)) image = 'http:' + image\n      image = image.replace(RE_AMPS, '&')\n    }\n\n    var getSimpleValue = function(cheerioTagQuery, targetAttribute) {\n      var foundValue\n\n      cheerioBody.find(cheerioTagQuery).each(function (i, elem) {\n        var elemContent = cheerio(elem).attr(targetAttribute)\n        foundValue = elemContent && elemContent.trim()\n      })\n\n      return foundValue\n    }\n\n    return {\n      title: (title && title.trim()) || 'Untitled',\n      image: image,\n      description: getSimpleValue('meta[property=\"og:description\"]', 'content'),\n      amphtml: getSimpleValue('link[rel=\"amphtml\"]', 'href'),\n      canonical: getSimpleValue('link[rel=\"canonical\"]', 'href')\n    }\n  })\n}\n\nfunction cleanBody(body) {\n  var removeSelectors = [\n    'head'\n  , 'script'\n  , 'noscript'\n  , 'style'\n  , 'iframe'\n  , 'nav'\n  , 'footer'\n  , 'label'\n  , 'audio'\n  , 'video'\n  , 'aside'\n  , '[class*=google]'\n  , '[id*=google]'\n  , '[class*=facebook]'\n  , '[id*=facebook]'\n  , '[class*=twitter]'\n  , '[id*=twitter]'\n  , '[class*=email]'\n  , '[id*=email]'\n  , '[class*=footer]'\n  , '[id*=footer]'\n  , '[class*=header]'\n  , '[id*=header]'\n  , '[class^=side]'\n  , '[id^=side]'\n  , '[class*=comments]'\n  , '[id*=comments]'\n  , '[class*=share]'\n  , '[id*=share]'\n  , '[class*=social]'\n  , '[id*=social]'\n  , '[class*=nav]'\n  , '[id*=nav]'\n  , '[class*=sponsored]'\n  , '[id*=sponsored]'\n  , '[class*=widget]'\n  , '[id*=widget]'\n  , '[class*=ad]'\n  , '[id*=ad]'\n  , '[class*=promo]'\n  , '[id*=promo]'\n  , '[class*=banner]'\n  , '[id*=banner]'\n  , '[class*=abridged]'\n  , '[id*=abridged]'\n  , '[class*=news]'\n  , '[id*=news]'\n  , '[class*=highlight]'\n  , '[id*=highlight]'\n  , '[class*=copyright]'\n  , '[id*=copyright]'\n  , '[class*=popular]'\n  , '[id*=popular]'\n  , '[class*=prev]'\n  , '[id*=prev]'\n  , '[class*=next]'\n  , '[id*=next]'\n  , '[class^=right]'\n  , '[id^=right]'\n  , '[class*=link]'\n  , '[id*=link]'\n  , '[style*=\"display: none\"]'\n  ]\n\n  return parseDom(body, 'body', removeSelectors.join(','))\n  .then(function (parsedBody) {\n    return cheerio(parsedBody).text().replace(RE_SPACES, ' ')\n  })\n}\n\nfunction removeScript(body) {\n  var removeSelectors = [\n    'script'\n  , 'style'\n  ]\n\n  return parseDom(body, 'html', removeSelectors.join(','))\n    .then(function (parsedBody) {\n      return cheerio(parsedBody).html().replace(RE_SPACES, ' ')\n    })\n}\n\nfunction parseDom(body, elementSelector, removeSelector) {\n  return new Promise(function (resolve, reject) {\n    var cornet = new Cornet()\n    var stream = new Readable()\n\n    stream.push(body)\n    stream.push(null)\n\n    stream.pipe(new Parser(cornet))\n    cornet.remove(removeSelector)\n\n    cornet.select(elementSelector, function (parsedBody) {\n      cornet.removeAllListeners()\n      cornet = null\n      resolve(parsedBody)\n    })\n  }).timeout(1000, 'Timed out trying to get ' + elementSelector + ' element')\n}\n\nfunction removeCommonWords(bodyText) {\n  return new Promise(function (resolve, reject) {\n    var content = bodyText.replace(RE_ALPHA_NUM, ' ')\n    resolve(\n      content.split(' ')\n      .map(function lowerCaseAndTrim(word) {\n        return word.toLowerCase().replace(/[\\d'\"”<>\\/]/g, ' ').trim()\n      })\n      .filter(function commonWordFilter(word) {\n        return !commonWords[word]\n      })\n      .join(' ')\n      .replace(RE_SPACES, ' ')\n    )\n  })\n}\n\nfunction requestPage(requestOptions) {\n  var reqDefaultOptions = {\n    followAllRedirects: true,\n    pool: { maxSockets: 256 },\n    'headers': {\n      'user-agent': requestOptions.userAgent || defaultReqOptions.userAgent\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    return request(_.merge(requestOptions, reqDefaultOptions), function reqCallback(err, res, body) {\n      if (err || res.statusCode !== 200 || !body) return reject(new Error('Webpage could not resolve'))\n      var endUrl = res.request.uri.href\n\n      resolve({url: endUrl, body: body})\n    })\n  })\n}\n\nfunction isMedia(url) {\n  var extension = Url.parse(url).pathname.split('.').pop()\n  return imageExtensions.includes(extension) || musicExtensions.includes(extension)\n    || videoExtensions.includes(extension)\n}\n\nfunction cookieJar(tokens, url) {\n  var j = request.jar()\n  _.forOwn(tokens, function(value, key) {\n    var cookie = request.cookie(key + '=' + value)\n    j.setCookie(cookie, url);\n  })\n  return j\n}\n","/home/travis/build/npmtest/node-npmtest-schenkerian/node_modules/schenkerian/phantom-load.js":"var _ = require('lodash')\nvar system = require('system')\nvar phantomWebpage = require('webpage')\n\nvar originalUrl = system.args[1]\nvar userAgent = system.args[2]\nvar maxRedirects = system.args[3]\nvar timeout = system.args[4]\nvar jar = system.args[5]\n\nfunction renderPage(url) {\n  var page = phantomWebpage.create()\n  var redirectURL = null\n\n  page.settings.userAgent = userAgent\n  page.settings.resourceTimeout = timeout\n\n  if (jar) setCookies(page, jar)\n\n  page.onError = function (msg, trace) {\n    // do nothing\n  }\n\n  page.onResourceTimeout = function (request) {\n    console.error('[ERROR] Exceeded timeout of ' + timeout + 'ms retrieving url[' + url + '] for originalUrl[' + originalUrl + ']')\n    phantom.exit(1)\n  }\n\n  page.onResourceReceived = function (resource) {\n    if (url === resource.url && resource.redirectURL) {\n      redirectURL = resource.redirectURL\n      if (maxRedirects === 0) {\n        console.error('[ERROR] Max Redirects reached for ' + originalUrl)\n        phantom.exit(1)\n      }\n      maxRedirects--\n      return\n    }\n\n    // If request to the page is not 200 status, fail.\n    if (resource.url === url && resource.status !== 200) {\n      console.error('[ERROR] Received non-success status[' + resource.status + ']')\n      page.close()\n      phantom.exit(1)\n    }\n  }\n\n  page.open(url, function (status) {\n    if (redirectURL) {\n      renderPage(redirectURL)\n    } else if (status === 'success') {\n      console.log(url)\n      console.log(page.content)\n      phantom.exit(0)\n    } else {\n      console.error('[ERROR] Received non-success status[' + status + '] for url[' + url + '] from originalUrl: '+ originalUrl)\n      phantom.exit(1)\n    }\n  })\n}\n\nfunction setCookies(page, jar) {\n  var cookieJar = JSON.parse(jar)\n  var cookies = cookieJar._jar.cookies\n  _.forEach(cookies, function(cookie) {\n    page.addCookie({\n      'name': cookie.key,\n      'value': cookie.value || '',\n      'domain': cookie.domain\n    })\n  })\n}\n\nrenderPage(originalUrl)\n","/home/travis/build/npmtest/node-npmtest-schenkerian/node_modules/schenkerian/config/reporter.js":"module.exports = {\n  reporter: function (res) {\n    var len = res.length\n      , str = ''\n\n    res.forEach(function (r) {\n      var file = r.file\n        , err = r.error\n\n      if (err.reason.match('a reserved word')) {\n        return --len\n      }\n      if (err.reason.match('to have an indentation at')) {\n        return --len\n      }\n      str += file + ': line ' + err.line + ', col ' +\n      err.character + ', ' + err.reason + '\\n'\n    })\n\n    if (str) {\n      process.stdout.write(str + '\\n' + len + ' error' +\n      ((len === 1) ? '' : 's') + '\\n')\n      process.exit(1)\n    } else {\n      process.stdout.write('Rock on. No Lint errors\\n')\n      process.exit(0)\n    }\n  }\n}\n"}